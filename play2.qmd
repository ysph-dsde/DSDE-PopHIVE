---
title: "PopHIVE: Population Health Information and Visualization Exchange"
title-block-banner: "#0c233f"
format:
  html:
    embed-resources: true
    page-layout: full
    toc: true
    toc-expand: true
    smooth-scroll: true
    theme: cosmo
css: styles.css
server: shiny
---

```{r setup, include=FALSE}
#| context: setup
#| include: false

# Field "panel" has value toolbar, which must instead be one of: `tabset`, `input`, `sidebar`, `fill`, `center`

#https://r-graph-gallery.com/183-choropleth-map-with-leaflet.html
suppressPackageStartupMessages({
library(tidyverse)
library(plotly)
library(shiny)
library(tidyverse)
library(scales)
library(janitor)
library(gtrendsR)
library(MMWRweek)
library(arrow)
#library(rnaturalearth)
library(parquetize)
library(viridisLite)
library(tigris)
library(usmap)
library(cowplot)
library(leaflet)
library(viridis)
library(sf)
library(ggrepel)
library(readxl)
library(ggalluvial)
library(waffle)
  
})
#library(cdcfluview)
#install.packages("remotes")
#remotes::install_github("hrbrmstr/cdcfluview")
#hhs_regions$state <- state.abb[match(hhs_regions$state_or_territory,state.name)]
#state.hhs.codes <- aggregate(hhs_regions$state, #list(hhs_regions$region), paste, collapse=",")
#state.hhs.codes$x <- gsub('NA,','',state.hhs.codes$x)
#state.hhs.codes$x <- gsub(',NA','',state.hhs.codes$x)
#saveRDS(state.hhs.codes, './hhs_regions.rds')

yale_colors <- c(
  "#00356B",
  "#286DC0",
  "#63AAFF",
  "#C4DDFC",
  "#DDDDDD"
)

yale_gradient <- c("#DDDDDD",
                   "#C4DDFC",
                   "#63AAFF",
                   "#286DC0",
                   "#00356B") # Adjust order for your desired gradient



#datasets for use in the global environment


"%!in%" <- function(x,y)!("%in%"(x,y))

source("./R/epic_age_import.R")
```

## Welcome to PopHIVE

This platform is designed to give its users timely, clear, and useful insights into community health. We bring together data from multiple sources—like public health reports, electronic health records, sewage testing, online search trends, surveys, and predictive models—to help paint a fuller picture of health trends. We're just getting started and will be adding even more data and disease insights in the coming months. This project is led by the Yale School of Public Health.

------------------------------------------------------------------------

## Respiratory infections

::: panel-tabset
### Respiratory Syncytial Virus (RSV)

*RSV is a virus that affects the lungs and can cause serious illness, especially in babies and older adults. Every year, RSV cases start rising in the southeastern U.S. in early fall, then spread to other parts of the country over the next few months. State-level data typically represent certain regions or subsets of the population and do not necessarily represent disease spread in the entire state*

```{r epic_data}
#| context: data
#| include: false


e1 <- readr::read_csv('./Data/Epic Cosmos Data/RSVICD10week_age_state.csv', skip=15, col_names=F) %>%
  rename(geography=X1, age=X2) %>%
  tidyr::fill( geography, .direction = 'down') %>%
  reshape2::melt(., id.vars=c('geography','age')) %>%
  arrange(geography, age, variable) %>%
  group_by(geography, age) %>%
  #week END date
  mutate(date= seq.Date(from=as.Date('2019-01-12'), length.out=n() , by='week')) %>%
  ungroup() %>%
  rename(N_cases=value) %>%
 mutate( N_cases = if_else(N_cases=='10 or fewer',NA_character_, N_cases),
         N_cases = as.numeric(N_cases),
         geography= if_else(geography=='Total', 'United States', geography)) %>%
  dplyr::select(-variable)

e1_all_ages <- e1 %>% filter(age=='Total') %>%
  rename(state=geography, N_epic=N_cases) 

e1_age <-  e1 %>% filter(age!='Total' & geography !='United States' & age != 'No value') %>%
  mutate( Level = if_else(age == 'Less than 1 years', '<1 Years',
                          if_else( age=='? 1 and < 5 years','1-4 Years',
                                   if_else(age=='? 5 and < 18 years' , "5-17 Years",
                                   if_else( age=="? 18 and < 50 years" ,"18-49 Years" ,         
                                   if_else( age=="? 50 and < 65 years" , "50-64 Years" ,        
                                   if_else( age=="? 65 and < 75 years" ,"65-74 Years",          
                                 if_else( age=="75 years or more" , "75+ Years", NA_character_         
                                           ) )))))
                          )) %>%
  dplyr::select(-age) %>%
  ungroup() %>%
  arrange( geography,Level, date) %>%
  group_by( geography,Level) %>%
  rename(N_cases_epic=N_cases) %>%
  filter(date>='2023-07-01') %>%
  mutate( N_cases_epic_3m=zoo::rollmean(N_cases_epic, k = 3, fill = NA, align='right'),
        max_grp= max(N_cases_epic_3m, na.rm=T),
         scale_age_epic = N_cases_epic_3m/max_grp*100
        ) %>%
  ungroup()

write.csv(e1_age, './Data/plot_files/e1_age_epic_age_rsv.csv')


#EPIC ED all cause
epic_ed_all <- epic_age_import(ds_name="all_ED_week_age_state_sunday.csv" ) %>%
  rename(N_ED_epic= N_cases_epic
         ) %>%
  dplyr::select(geography,Level, date,N_ED_epic)

epic_ed_rsv <- epic_age_import(ds_name="RSV_ED_week_age_state_sunday.csv" ) %>%
 rename( N_RSV_ED_epic= N_cases_epic) %>%
  dplyr::select(geography,Level, date,N_RSV_ED_epic)

epic_ed_flu <- epic_age_import(ds_name="FLU_ED_week_age_state_sunday.csv" ) %>%
 rename( N_flu_ED_epic= N_cases_epic) %>%
  dplyr::select(geography,Level, date,N_flu_ED_epic)

epic_ed_covid <- epic_age_import(ds_name="COVID_ED_week_age_state_sunday.csv" ) %>%
 rename( N_covid_ED_epic= N_cases_epic) %>%
  dplyr::select(geography,Level, date,N_covid_ED_epic)

epic_ed_combo <- epic_ed_all %>%
  left_join(epic_ed_rsv, by=c('geography','Level', 'date')) %>%
  left_join(epic_ed_flu, by=c('geography','Level', 'date')) %>%
  left_join(epic_ed_covid, by=c('geography','Level', 'date')) %>%
  arrange(Level, geography, date) %>%
  group_by(Level, geography) %>%
  mutate(pct_RSV_ED_epic =N_RSV_ED_epic/N_ED_epic*100,
         pct_flu_ED_epic =N_flu_ED_epic/N_ED_epic*100,
         pct_covid_ED_epic =N_covid_ED_epic/N_ED_epic*100,
         
         pct_RSV_ED_epic = zoo::rollmean(pct_RSV_ED_epic, k = 3, fill = NA, align='right'),
         pct_flu_ED_epic = zoo::rollmean(pct_flu_ED_epic, k = 3, fill = NA, align='right'),
         pct_covid_ED_epic = zoo::rollmean(pct_covid_ED_epic, k = 3, fill = NA, align='right'),
         
    ED_epic_scale_RSV= 100*pct_RSV_ED_epic/max(pct_RSV_ED_epic,na.rm=T),
    ED_epic_scale_flu= 100*pct_flu_ED_epic/max(pct_flu_ED_epic,na.rm=T),
    ED_epic_scale_covid= 100*pct_covid_ED_epic/max(pct_covid_ED_epic,na.rm=T),
    )


write.csv(epic_ed_combo, './Data/plot_files/epic_ed_combo_rsv_flu_covid.csv')

# e1_all_ages <- readr::read_csv('./Data/Epic Cosmos Data/RSVICD10week_state.csv', skip=15, col_names=F) %>%
#   rename(geography=X1) %>%
#   tidyr::fill( geography, .direction = 'down') %>%
#   reshape2::melt(., id.vars=c('geography')) %>%
#   arrange(geography, variable) %>%
#   group_by(geography) %>%
#   #Date based on week END
#   mutate(date= seq.Date(from=as.Date('2019-01-12'), length.out=n() , by='week')) %>%
#   ungroup() %>%
#   rename(N_cases=value) %>%
#  mutate( N_cases = if_else(N_cases=='10 or fewer',NA_character_, N_cases),
#          N_cases = as.numeric(N_cases),
#          geography= if_else(geography=='Total', 'United States', geography)) %>%
#   dplyr::select(-variable) %>%
#   rename(state=geography, N_epic=N_cases)


```


```{r gtrends_data}
#| context: data
#| include: false

g_states <- paste('US',state.abb,sep='-')
# Read the Parquet file

#11j30ybfx6 = RSV vaccine
url2 <- "https://github.com/DISSC-yale/gtrends_collection/raw/refs/heads/main/data/term=%252Fg%252F11j30ybfx6/part-0.parquet" #rsv vaccination category

temp_file2 <- tempfile(fileext = ".parquet")
download.file(url2, temp_file2, mode = "wb")

g1_vax_state <- read_parquet(temp_file2) %>%
  filter(location %in% g_states) %>%
  collect() %>%
  mutate(date=as.Date(date),
         date = as.Date(ceiling_date(date, 'week'))-1,
         stateabb= gsub('US-','', location),
         state=state.name[match(stateabb,state.abb)],
         value=round(value,2)) %>%
  rename(search_volume_vax=value) %>%
  dplyr::select(state, date, search_volume_vax) %>%
  distinct() %>%
  filter(date>='2014-01-01')


# Define the GitHub raw URL
url1 <- "https://github.com/DISSC-yale/gtrends_collection/raw/refs/heads/main/data/term=rsv/part-0.parquet"


# Download the file temporarily
temp_file1 <- tempfile(fileext = ".parquet")
download.file(url1, temp_file1, mode = "wb")



g1_state <- read_parquet(temp_file1) %>%
  filter(location %in% g_states) %>%
  collect() %>%
  mutate(date=as.Date(date),
         date = as.Date(ceiling_date(date, 'week'))-1,
         stateabb= gsub('US-','', location),
         state=state.name[match(stateabb,state.abb)],
         value=round(value,2)) %>%
  rename(search_volume=value) %>%
  dplyr::select(state, date, search_volume) %>%
  distinct() %>%
  filter(date>='2014-01-01') %>%
  full_join(g1_vax_state, by=c('state', 'date') ) %>%
  mutate(month=month(date),
        season = if_else(month>=7 & month <=10,1,0),
        rsv_novax = search_volume - search_volume_vax ,
         rsv_novax2 = search_volume - season*(4.41-1.69)*search_volume_vax - (1-season)*3.41*search_volume_vax,  #2.655 based on the regression below
        rsv_novax2 = if_else(rsv_novax2<0,0,rsv_novax2)
        )
  

# g1_state %>%
#   filter(state=='New York' & date>='2023-07-01') %>%
#   ggplot(aes(x=date, y=search_volume)) +
#     geom_line()+
#     geom_line(aes(x=date, y=search_volume_vax), col='red') +
#   geom_line(aes(x=date, y=rsv_novax2), col='blue') + 
#   geom_line(aes(x=date, y=search_volume_vax), col='green')  

# g1_state %>%
#   filter(state=='New York' & date>='2023-07-01') %>%
#   mutate(month=as.factor(month(date)) )%>%
# ggplot(aes(x=search_volume_vax, y=search_volume, color=month)) +
#     geom_point()

# 
 mod1 <- lme4::lmer(search_volume~ 1 + season*search_volume_vax +  (1|state), data=g1_state[g1_state$date>=as.Date('2023-07-01'),])
# coef.vax <- summary(mod1)$coefficients['search_volume_vax','Estimate']



##Metro; Crosswalk the DMA to counties FIPS codes
#https://www.kaggle.com/datasets/kapastor/google-trends-countydma-mapping?resource=download
# cw1 <- read.csv('./Data/GoogleTrends_CountyDMA_Mapping.csv') %>%
#   mutate(GOOGLE_DMA=toupper(GOOGLE_DMA))
# 
# #Metro region
# #https://stackoverflow.com/questions/61213647/what-do-gtrendsr-statistical-areas-correlate-with
# #Nielsen DMA map: http://bl.ocks.org/simzou/6459889
# data("countries")
# 
# metros <- countries[countries$country_code == 'US', ]
# 
# metros <-
#   metros[grep("[[:digit:]]", substring(metros$sub_code, first = 4)), ]
# 
# metros$numeric.sub.area <- gsub('US-', '', metros$sub_code)
# 
# 
# dma_link1 <- cbind.data.frame('DMA_name'=metros$name,'DMA'=metros$numeric.sub.area) %>%
#   rename(DMA_ID=DMA) %>%
#   full_join(cw1, by=c("DMA_name"="GOOGLE_DMA"))
# 



# g1_metro <- read_parquet(temp_file) %>%
#   filter(!(location %in% g_states) ) %>%
#   collect() %>%
#   mutate(date2=as.Date(date, '%b %d %Y'),
#          date = as.Date(ceiling_date(date2, 'week'))-1) %>%
#   filter(date>='2021-03-01') %>%
#   rename(search_volume=value) %>%
#   left_join(dma_link1, by=c('location'='DMA_ID')) %>% #many to many join by date and counties
#    group_by(STATEFP,CNTYFP) %>%
#    mutate(fips=paste0(STATEFP,sprintf("%03d", CNTYFP)),
#           fips=as.numeric(fips),
#           
#           search_volume_scale = search_volume/max(search_volume,na.rm=T)*100) %>%
#    ungroup() 




```

```{r rsv_data}
#| context: data
#| include: false


#csv_to_parquet('https://raw.githubusercontent.com/ysph-dsde/data-gov/refs/heads/main/RSV%20Infections%20Data/Raw%20Download/NREVSS%20by%20HHS%20Region_Respiratory%20Syncytial%20Virus%20(RSV)%20Surveillance%20Archive_Downloaded%2001.23.2025.csv',path_to_parquet ='./Data/rsv_testing.parquet')

rsv1_tests <- open_dataset('./Data/rsv_testing.parquet') %>%
  collect() %>%
  as.data.frame()


key <- readRDS('./Data/hhs_regions.rds')

rsv_ts <- rsv1_tests %>%
  mutate(date= as.Date(substr(mmwrweek_end,1,10 ), '%m/%d/%Y'),
         postdate= as.Date(substr(posted,1,10 ), '%m/%d/%Y')) %>%
  filter(postdate==max(postdate)) %>%
  ungroup() %>%
  filter(level != 'National') %>%
  group_by(level ) %>%
  left_join(key, by=c('level'='Group.1')) %>%
  mutate(scaled_cases = pcr_detections/max(pcr_detections)*100,
         hhs_abbr = x  ) %>%
  ungroup()

dates2_rsv_ts <- MMWRweek(as.Date(rsv_ts$date))

max.wk.yr <- max(dates2_rsv_ts$MMWRweek[dates2_rsv_ts$MMWRyear==max(dates2_rsv_ts$MMWRyear)])

rsv_ts <- cbind.data.frame(rsv_ts,dates2_rsv_ts[,c('MMWRyear', 'MMWRweek')]) %>%
  mutate( epiyr = MMWRyear, 
          epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
          epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
          epiwk=epiwk-26
  )

write.csv(rsv_ts,'./Data/plot_files/rsv_ts_nrevss_test_rsv.csv')

#Detailed data, did a static download; updated regularly via API rdmq-nq56
##convert from CSV to parquet, which is much more compact!
# csv_to_parquet(path_to_file = './Data/CopyOfNSSP_Emergency_Department_Visit_Trajectories_by_State_and_Sub_State_Regions-_COVID-19__Flu__RSV__Combined___20250130.csv', path_to_parquet ='./Data/NSSP_detailed.parquet') 
dates <- seq.Date(from=as.Date('2022-10-01'), to=as.Date('2025-01-30'),by='week')

#TODO fix county mapping in CT https://stackoverflow.com/questions/78599492/plotting-old-connecticut-county-regions-in-usmap
#for(i in 1:length(dates)){
#}

# 
# d1_all <- open_dataset('./Data/NSSP_detailed.parquet') %>%
#   filter(county!='All') %>%collect()


#Waste water Latest: 
#RSV
#https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/RSVStateLevelDownloadCSV.csv


#fluA
#ww_flu1 <- read.csv('https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/FluA/FluAStateMapDownloadCSV.csv')%>%
#write.csv(ww_flu1,'./Data/FluStateLevelDownloadCSV_ww.csv')


#hospitalizations
#
# csv_to_parquet('https://raw.githubusercontent.com/ysph-dsde/data-gov/refs/heads/main/RSV%20Infections%20Data/Harmonized%20RSV-NET_01.29.2025.csv',path_to_parquet ='./Data/rsvnet_hosp.parquet')


# csv_to_parquet('./Data/NSSP_demographics.csv',path_to_parquet ='./Data/NSSP_demographics.parquet')

h1 <- open_dataset('./Data/live_files/respnet_hosp.parquet') %>%
  filter( site != 'Overall' & surveillance_network=='RSV-NET' & type=='Unadjusted Rate' & age_group=='Overall' &
           sex=='Overall' & race_ethnicity=='Overall') %>%
  rename(state=site, hosp_rate=weekly_rate, date=X_weekenddate) %>%
  mutate(date=as.Date(substr(date,1,10)) ) %>%
  dplyr::select(state, date, hosp_rate) %>%
  collect() %>%
  as.data.frame()

h1.age <- open_dataset('./Data/rsvnet_hosp.parquet') %>%
  filter(`Region Type`=='State' & `Diagnostic Test Type`=='All' & Characteristic=='Age'  & Region != 'All Sites') %>%
  rename(state=Region, hosp_rate=`Crude Rate`, date=`Week Observed`) %>%
  dplyr::select(state, date, hosp_rate, Level) %>%
  collect() %>%
  ungroup() %>%
  filter( date >=as.Date('2023-07-01')) %>%
  group_by(state, Level) %>%
  mutate(hosp_rate_3m=zoo::rollmean(hosp_rate, k = 3, fill = NA, align='right'),
         scale_age=hosp_rate_3m/max(hosp_rate_3m, na.rm=T )*100,
         ) %>%
  as.data.frame()


write.csv(h1.age,'./Data/plot_files/h1.age_rsv_hosp.csv')


#Wastewaster by state and date
w1 <- read.csv('./Data/RSVStateLevelDownloadCSV_ww.csv') %>%
  mutate(date=as.Date(Week_Ending_Date, '%m/%d/%Y')) %>%
  filter(Data_Collection_Period=='All Results') %>%
  rename(state=State.Territory, rsv_ww=State.Territory_WVAL) %>%
  arrange(state, date) %>%
  dplyr::select(state, date, rsv_ww)


#ED visits by state overall
d1 <- open_dataset('./Data/NSSP_detailed.parquet') %>%
  filter(county=='All'  ) %>%
  rename(state=geography, date='week_end') %>%
  dplyr::select(state, date, percent_visits_rsv) %>%
  collect() %>%
  as.data.frame()


#########Harmonize the datasets

nssp_harmonized <- d1 %>%
  rename(Outcome_value1=percent_visits_rsv,
         geography=state) %>%
  mutate(outcome_type='ED',
          outcome_label1 = 'Pct of ED visits',
    domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'CDC NSSP',
    url = 'https://healthdata.gov/dataset/NSSP-Emergency-Department-Visit-Trajectories-by-St/hr4c-e7p6/',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

ww1_harmonized <- w1 %>%
  rename(Outcome_value1=rsv_ww,
         geography=state) %>%
  mutate(outcome_type='WasteWater',
          outcome_label1 = 'Waste Water',
domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'CDC NWWS',
    url = 'https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/RSVStateLevelDownloadCSV.csv',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

h1_harmonized <- h1 %>% 
  rename(Outcome_value1=hosp_rate,
         geography=state) %>%
  mutate(outcome_type='Inpatient Hospitalization',
          outcome_label1 = 'Hospitalization Rate',
    domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'CDC RSV-NET (RespNet)',
    url = 'https://data.cdc.gov/resource/kvib-3txy.csv',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

epic_rsv_aggregate_harmonized <- e1_all_ages %>%
rename(Outcome_value1=N_epic,
         geography=state) %>%
  mutate(outcome_type='ED',
          outcome_label1 = 'ED (N)',
    domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'Epic Cosmos',
    url = 'https://www.epicresearch.org/',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

g1_state_harmonized_v1 <- g1_state %>%
  rename(Outcome_value1=rsv_novax,
         geography=state) %>%
  mutate(outcome_type='Google Searches',
          outcome_label1 = 'Google Searches 1',
    domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'Google Health Trends',
    url = 'https://dissc-yale.github.io/gtrends_collection/',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

g1_state_harmonized_v2 <- g1_state %>%
  rename(Outcome_value1=rsv_novax2,
         geography=state) %>%
  mutate(outcome_type='Google Searches',
          outcome_label1 = 'Google Searches 2',
    domain = 'Respiratory infections',
    date_resolution = 'week',
    update_frequency = 'weekly',
    source = 'Google Health Trends',
    url = 'https://dissc-yale.github.io/gtrends_collection/',
    geo_strata = 'state',
    age_strata = 'none',
    race_strata = 'none',
    race_level = NA_character_,
    additional_strata1 = 'none',
    additional_strata_level = NA_character_,
    sex_strata = 'none',
    sex_level = NA_character_)

dwh <- bind_rows(nssp_harmonized, ww1_harmonized,h1_harmonized,epic_rsv_aggregate_harmonized,g1_state_harmonized_v1, g1_state_harmonized_v2) %>%
  filter(date >=as.Date('2023-07-01')) %>%
    arrange(geography, outcome_label1,date) %>%
  group_by(geography,outcome_label1) %>%
  filter(date>='2023-07-01') %>%
  mutate(outcome_3m = zoo::rollmean(Outcome_value1, k = 3, fill = NA, align='right'),
                outcome_3m = outcome_3m / max(outcome_3m, na.rm=T)*100
       )

dates2 <- MMWRweek(as.Date(dwh$date))

max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])

dwh <- cbind.data.frame(dwh,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
  mutate( epiyr = MMWRyear, 
          epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
          epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
          epiwk=epiwk-26
  )

write.csv(dwh,'./Data/plot_files/dwh_combined_plot1_long.csv')


```



```{r rsv_plots}
#| context: server

########################################
##RSV
########################################
output$distPlotRSV3 <- renderPlotly({
  
  point_plot <- rsv_ts %>% filter(hhs_abbr==input$hhs.region.select &  epiyr == max(epiyr, na.rm=T) ) %>%
    filter(epiwk==max(epiwk))
  
  rsv_ts1 <- rsv_ts %>%
    filter(x==input$hhs.region.select) %>%
    ggplot(aes(x=epiwk, y=scaled_cases, group=as.factor(epiyr), color=as.factor(epiyr)))+
    geom_line()+
    theme_minimal()+
    xlab('Weeks since July')+
    ylab('RSV positive tests')+
    scale_colour_viridis_d() +
    geom_point(data=point_plot,aes(x=epiwk, y=scaled_cases) ,col='red') +
    guides(color=guide_legend(title="Season starting:"))
  
  
  ggplotly(rsv_ts1)
})


############################
#https://www.cdc.gov/wcms/vizdata/NCEZID_DIDRI/RSVStateLevelDownloadCSV.csv

output$distPlotRSV_dwh <- renderPlotly({
  
 pal1 <- RColorBrewer::brewer.pal(n=length(unique(dwh$outcome_label1))+1,'Set1' )
pal1 <- pal1[-6]
 
rsv_ts_comp <- dwh %>%
    filter(geography==input$state.select2 ) %>%
    mutate(ds_label = if_else(outcome_label1=='Google Searches 1', 'Google 1',
           if_else(outcome_label1=='Google Searches 2', 'Google 2',
                 if_else(outcome_label1=='Pct of ED visits', 'ED visits (CDC/NSSP)',           
                         if_else(outcome_label1=='ED (N)', 'ED visits (Epic cosmos)', 
                                 if_else(outcome_label1=='Hospitalizations', 'Hospitalization Resp-Net)', outcome_label1
                                     
                   )))))
           ) %>%
    ggplot()+
  geom_line(aes(x=date, y=outcome_3m, color=ds_label,linetype=ds_label, group=ds_label,
                text=paste0(geography, "<br>", 
                            source, "<br>", 
                           outcome_label1, "<br>",
                           Outcome_value1, "<br>",
                           date, "<br>"
                           ))) +

            theme_minimal() +
    xlab('Date')+
    labs(color='Source') +
    ylab('RSV activity (scaled to 100)')+
   scale_color_manual(values=pal1) +
    ggtitle(input$state.select2)
  
  ggplotly(rsv_ts_comp,tooltip='text')

})


#hospitalization by age
output$distPlotRSV_hosp_age <- renderPlotly({
  
  rsv_ts_comp <- h1.age %>%
    filter(state==input$state.select3 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=scale_age, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('RSV activity (CDC surveillance)')+
    scale_colour_viridis_d() +
    ggtitle(paste0(input$state.select3, ' CDC hospital surveillance'))
  
  ggplotly(rsv_ts_comp)
})


#epic by age
output$distPlotRSV_epic_age <- renderPlotly({
  
  rsv_epic_ts_comp <- e1_age %>%
    filter(geography==input$state.select3 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=scale_age_epic, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('RSV activity (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0(input$state.select3, ' Epic Cosmos'))
  
  ggplotly(rsv_epic_ts_comp)
})


#epic ED by age
output$distPlotRSV_epic_ED_age <- renderPlotly({
  
  
  if(input$scale.rsv==F){
  rsv_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select3 & date >=as.Date('2023-07-01')) %>%
    ggplot()+
    geom_line(aes(x=date, y=pct_RSV_ED_epic, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Percent of ED visits for RSV (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for RSV in ',input$state.select3))
  
  ggplotly(rsv_epic_ts_comp)
  
  }else{
      rsv_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select3 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=ED_epic_scale_RSV, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Rescaled ED visits for RSV (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for RSV in ',input$state.select3))
  
  ggplotly(rsv_epic_ts_comp)
  }
  
  
})


output$epicMapRSV <- renderPlotly({

 map_data <- epic_ed_combo %>%
      filter(date == input$selected_date & Level == '<1 Years') %>%
      mutate(state = state.abb[match(geography, state.name)] ,
             #Note, if >20%, cap at 20 for plotting!
           pct_RSV_ED_epic= if_else(pct_RSV_ED_epic>20,20, pct_RSV_ED_epic)  ) %>%
   filter(!is.na(state)) %>%
   as.data.frame()

 max.val <- max(epic_ed_combo$pct_RSV_ED_epic, na.rm=T)
pal1 <- viridis_pal()(4)
date.print <- input$selected_date

p1 <- usmap::plot_usmap(regions = "state", data = map_data, values = "pct_RSV_ED_epic") +
scale_fill_gradientn(
    colors = pal1,
    values = scales::rescale(c(0, 5, 10, 15, 20)),
    limits = c(0, 20),
    na.value = "#440154FF"
  ) +
  ggtitle(paste("RSV ED Visit Percentage <1 year olds on", date.print))

ggplotly(p1)
})



# output$googleMapRSV <- renderPlotly({
# 
#  map_data <- g1_metro %>%
#    as.data.frame() %>%
#          filter(date == input$date.select2 ) 
# 
# 
#  max.val <- max(map_data$search_volume_scale, na.rm=T)
# pal1 <- viridis_pal()(4)
# date.print <- input$date.select2
# 
# p1 <- usmap::plot_usmap(regions = "county", data = map_data, values = "search_volume_scale",
#                         color = NA,    # Faint border color
#                         size = 0     ) +
# scale_fill_gradientn(
#     colors = pal1,
#     values = scales::rescale(c(0, 20, 40, 60, 80,100)),
#     limits = c(0, 100),
#     na.value = "darkgray"
#   ) +
#     theme(panel.background = element_rect(color = "white", fill = "white")) +
# 
#   ggtitle(paste("Google Search Volume for 'rsv' ending", date.print))
# 
# ggplotly(p1)
# })

```

::: panel-tabset
#### Overall Trends

```{r}
#| panel: toolbar

selectInput("state.select2", "State:", 
            choices=state.name, selected='New York')
```

```{r}
#| panel: fill

plotlyOutput("distPlotRSV_dwh")

```

|                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
|------------------------------------------------------------------------|
| Viral levels in the community can be measured in different ways, which is important because no measure is perfect. By triangulating data from sources like emergency department (ED) visits, hospitalizations, and wastewater surveillance, we can get a more complete picture of how and when a virus is spreading, which can help you make better-informed decisions. Epic data come from the [Epic Cosmos platform](https://www.epicresearch.org/about-us). The Google Trends data are obtained from the Google Health Trends API (volume of searches for 'rsv', subtracting volume of searches for category "respiratory syncytial virus vaccine" (Knowledge graph: /g/11j30ybfx6) )   |

#### Trends in positive tests

```{r}
#| panel: toolbar

selectInput("hhs.region.select", "Region:", 
            choices=unique(rsv_ts$hhs_abbr), selected='CT,ME,MA,NH,RI,VT')
```

```{r}
#| panel: fill
plotlyOutput("distPlotRSV3")

```

These data come from the NREVSS surveillance system, which is comprised of laboratories around the US

#### By age

```{r}
#| panel: toolbar

selectInput("state.select3", "State:", 
            choices=state.name, selected='New York')

checkboxInput("scale.rsv", "Rescale?", 
           value=T)
```

```{r}
#| panel: fill

plotlyOutput("distPlotRSV_epic_ED_age")

plotlyOutput("distPlotRSV_hosp_age")


```

The hospitalization data comes from the RSV-NET, a CDC-supported network of sites around the US that tracks hospitalizations from RSV, influenza, and COVID-19. Data are smoothed with a 3 week average for vizualization.

#### Map of ED visits (state)

```{r}
#| panel: toolbar

sliderInput("selected_date", label=NULL, 
                  min = min(epic_ed_combo$date), 
                  max = max(epic_ed_combo$date),
                  value = as.Date('2024-10-19'),
                 step=7,
                  timeFormat = "%Y-%m-%d",
                  animate = animationOptions(interval = 1000, loop = TRUE, playButton = 'P',pauseButton = 'S'))
    
```

```{r}
#| panel: fill

      plotlyOutput("epicMapRSV")

```

#### Map of ED visits (county)

```{r}
#| panel: fill

i=length(dates)-1

d1_state <- open_dataset('./Data/NSSP_detailed.parquet') %>%
  filter(county=='All'  ) %>%
  rename(percent_visits_rsv_state =percent_visits_rsv ) %>%
   # percent_visits_rsv_state=if_else(percent_visits_rsv>1,1,percent_visits_rsv) ) %>%
  rename(state=geography) %>%
  dplyr::select(state,week_end, percent_visits_rsv_state) %>%
  collect()

d1_all <- open_dataset('./Data/NSSP_detailed.parquet') %>%
  filter(county!='All' ) %>%
   collect() %>%
    rename(state=geography) %>%
  dplyr::select(state, county, fips, week_end, percent_visits_rsv) %>%
  left_join(d1_state, by=c('week_end', 'state')) %>%
  mutate(percent_visits_rsv = if_else(is.na(percent_visits_rsv),percent_visits_rsv_state,percent_visits_rsv ),
  #fix CT county coding
  fips = if_else(state=='Connecticut' & county=='Fairfield',9001 ,
              if_else(state=='Connecticut' &  county=='Hartford', 9003,
                 if_else(state=='Connecticut'& county=='Litchfield', 9005 ,
                  if_else(state=='Connecticut' & county=='Middlesex',9007 ,
                   if_else(state=='Connecticut' & county=='New Haven', 9009 ,
                   if_else(state=='Connecticut' & county=='New London',9011 ,
                   if_else(state=='Connecticut' & county=='Tolland',9013 ,
                   if_else(state=='Connecticut' & county=='Windham', 9015, fips)))))))
         ) ) %>%
  as.data.frame()

   subtitle= 'National Syndromic Surveillance Program (CDC)'
   scaletitle= 'Percent'
  
pal1 <- viridis_pal()(4)
    
p1 <- d1_all %>%
  filter(week_end==dates[i]) %>%
         usmap::plot_usmap(regions='county', data=.,values='percent_visits_rsv',
                        color = NA,    # Faint border color
                        size = 0     )+      # Thin border lines)   +
  theme(panel.background = element_rect(color = "white", fill = "white")) +
 scale_fill_gradientn(
   scaletitle,
    colors = pal1,
    values = scales::rescale(c(0, 0.33, 0.66, 0.99, max(d1$percent_visits_rsv))),
    limits = c(0, max(d1$percent_visits_rsv)),
    na.value = "darkgray"
  )


ggplotly(p1)%>%
  layout(title = list(text = paste0(paste0('RSV ED visits by jurisdiction ', dates[i]),
                                    '<br>',
                                    '<sup>',
                                     subtitle,'</sup>')))
```

The maps shows the percentage of ED visits in each jurisdiction caused by RSV. Some states have county-level data available, while others have state-level data only. This includes data aggregated across all age groups. Ideally this would be broken out separately for infants and older adults. The data come from the national syndromic surveillance network.

#### Maps of Google searches

*Coming soon* 

```{r}
#| panel: toolbar

# sliderInput("date.select2", label=NULL, 
#                   min = min(epic_ed_combo$date), 
#                   max = max(epic_ed_combo$date),
#                   value = as.Date('2024-10-19'),
#                  step=7,
#                   timeFormat = "%Y-%m-%d")
    
```

```{r}
#| panel: fill

#plotlyOutput('googleMapRSV')
```

People searching for information on RSV often correlates well with actual clinical activity for RSV.
:::

### Influenza (Seasonal Flu)

```{r flu_plots}
#| context: server

########################################
##flu
########################################

#epic ED by age
output$distPlotflu_epic_ED_age <- renderPlotly({
  
  
  if(input$scale.flu==F){
  flu_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select4 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=pct_flu_ED_epic, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Percent of ED visits for influenza (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for influenza in ',input$state.select4))
  
  ggplotly(flu_epic_ts_comp)
  }else{
      flu_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select4 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=ED_epic_scale_flu, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Rescaled ED visits for influenza  (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for influenza in ',input$state.select4))
  
  ggplotly(flu_epic_ts_comp)
  }
  
  
})



```

#### By age

```{r}
#| panel: toolbar

selectInput("state.select4", "State:", 
            choices=state.name, selected='New York')

checkboxInput("scale.flu", "Rescale?", 
           value=T)
```

```{r}
#| panel: fill

plotlyOutput("distPlotflu_epic_ED_age")



```

### Covid-19

```{r covid_plots}
#| context: server

########################################
##covid
########################################

#epic ED by age
output$distPlotcovid_epic_ED_age <- renderPlotly({
  
  if(input$scale.covid==F){
  covid_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select5 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=pct_covid_ED_epic, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Percent of ED visits for COVID-19  (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for Covid in ',input$state.select5))
  
  ggplotly(covid_epic_ts_comp)
  }else{
      covid_epic_ts_comp <- epic_ed_combo %>%
    filter(geography==input$state.select5 & date >=as.Date('2023-07-01')) %>%
    
    ggplot()+
    geom_line(aes(x=date, y=ED_epic_scale_covid, group_by=Level, color=Level)) +
    theme_minimal()+
    xlab('Date')+
    ylab('Rescaled ED visits for COVID-19  (Epic Cosmos)')+
    scale_colour_viridis_d() +
    ggtitle(paste0('ED visits for Covid in ',input$state.select5))
  
  ggplotly(covid_epic_ts_comp)
  }
  
  
})



```

#### By age

```{r}
#| panel: toolbar

selectInput("state.select5", "State:", 
            choices=state.name, selected='New York')

checkboxInput("scale.covid", "Rescale?", 
           value=T)
```

```{r}
#| panel: fill

plotlyOutput("distPlotcovid_epic_ED_age")



```

### Pneumococcus

*Pneumococcus is an important bacterial pathogen that causes severe disease like meningitis, blood-stream infections, and pneumonia. It also is a major cause of ear infections in children. Vaccines (PCVs) have been in use in the USA since 2000, with a switch to a new PCV that covered more strains in 2010. The introduction of these vaccines has largely led to the elimination of vaccine-targeted serotypes and smaller increases in disease caused by other serotypes. Some vaccine-targeted serotypes have recently re-emerged (e.g., 19F) for reasons that are still not clear.*

```{r pneumococcus_data}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("data.csv")$mtime


###Pneumococcal disease
#csv_to_parquet('https://data.cdc.gov/resource/qvzb-qs6p.csv',path_to_parquet ='./Data/ipd_cdc1998.parquet')

ipd1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
  rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st),
          agec1 = if_else(agec %in% c("Age <2","Age 2-4") ,1,2 ),
          agec=gsub('Age ', '', agec),
          agec2 = if_else( agec %in% c('<2','2-4'), '<5',
                           if_else( agec %in% c('5-17','18-49'), '5-49',
                                    if_else( agec %in% c('50-64','65+'), '50+',NA))),
          agec2 = factor(agec2, levels=c('<5','5-49','50+'), labels=c('<5 years', '5-49 years', '50+ years') )
  ) %>%
  group_by(st,agec2, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup()

all.sts <- unique(ipd1$st)


# pneumococcal serotype by state
b2019 <- read.csv('./Data/pneumococcus/jiac058_suppl_supplementary_table_s2.csv') %>%
  group_by(State, sero) %>%
  summarize(N_cases=n()) %>%
  mutate(sero=as.factor(sero)) %>%
  ungroup() %>%
  group_by(State, sero) %>%
  mutate(mean_cases=max(N_cases,na.rm=T)
  ) %>%
  group_by(State) %>%
  mutate(         pct = N_cases/sum(N_cases, na.rm=T)*100) %>%
  ungroup() %>%
  tidyr::complete(sero,State , fill=list(pct=0))  #fills 0
```

```{r pneumococcus_plots}
#| context: server 
#Pneumococcal disease
output$stPlot <- renderPlotly({
  p1 <- ipd1  %>%
    filter(st %in% c(input$select.st)) %>%
    ggplot(aes(x=year, y=N_IPD))+
    geom_line()+
    facet_wrap(~agec2, scales ='free', nrow=1) +
    theme_classic()+
    theme(axis.text.x = element_text(angle = 45, vjust = 1.0, hjust=1)) +
    geom_vline(xintercept=c(1999.5, 2009.5), lty=2, color='gray')+
    ylim(0,NA) +
    ggtitle(paste0('Trends in IPD caused by serotype ', input$select.st, ' in the US'))
  ggplotly(p1)
})


#serotype geography
output$stGeographyPlot <- renderPlotly({
  
  b2019 %>%
    filter(sero==input$select.st2 ) %>%
    ggplot( aes(fill=State, y=pct, x=sero)) +
    geom_bar(position="dodge", stat="identity")+
    scale_fill_viridis_d()+
    theme_minimal()+
    ylab('Proportion of IPD cases in the state') +
    ggtitle(input$select.st2)
})
```

::: panel-tabset
#### Trends in serotype frequency

```{r}
#| panel: toolbar
selectInput("select.st",
            "Select serotype:",
            all.sts,
            selected='19F')
```

```{r}
#| panel: fill
plotlyOutput("stPlot")

```

This shows trends in Invasive Pneumococcal Disease caused by different serotypes, as reported to the Active Bacterial Core Surevillance system (ABCs) at CDC. This is a network of 10 sites around the US.

#### Change in Invasive pneumococcal Disease 1998-2022

```{r pneumococcus_data_2}
#| include: false

pcv7 <- c('4','6B','9V','14','18C','19F','23F')

pcv10gsk <- c(pcv7,'1','5','7F')

pcv13 <- c(pcv7, '1','3','5','6A','7F','19A')

s1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
  rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
  group_by(st) %>%
  mutate(cum_N= sum(N_IPD)) %>%
  filter(cum_N>100) %>%
  ungroup() %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT'))
s2_pre<- s1 %>%
  filter(year %in% c(1998, 1999)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
  group_by(st) %>%
  summarize(N_IPD_pre=mean(N_IPD)) %>%
  ungroup() %>%
  tidyr::complete(st,  fill=list(N_IPD_pre=0))  #fills 0

s2_pre13<- s1 %>%
  filter(year %in% c(2008, 2009)) %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>%
  ungroup() %>%
  group_by(st) %>%
  summarize(N_IPD_pre=mean(N_IPD)) %>%
  ungroup() %>%
  tidyr::complete(st,  fill=list(N_IPD_pre=0))  #fills 0

s2<- s1 %>%
  group_by(st, year) %>%
  summarize(N_IPD=sum(N_IPD)) %>% #sum across age group
  ungroup() %>%
  tidyr::complete(st, year, fill=list(N_IPD=0))%>%  #fills 0
  left_join(s2_pre, by='st') %>%
  mutate(N_IPD_pre = if_else(is.na(N_IPD_pre),0, N_IPD_pre) ,
         logRR = log((N_IPD+1)/(N_IPD_pre+1) )) 

max_RR <- s2 %>%
  group_by(st) %>%
  summarize(max_RR = max(logRR)) %>%
  arrange((max_RR))

s2$st <- factor(s2$st, levels = max_RR$st)

df_wide <- s2 %>%
  dplyr::select(year, st, logRR) %>%
  tidyr::pivot_wider(names_from = year, values_from = logRR)


df_vt <- df_wide %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='VT') %>%
  dplyr::select(-pcv13st) 

df_nvt <- df_wide %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='NVT') %>%
  dplyr::select(-pcv13st) 

rr_nvt <- s2 %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='NVT') %>%
  ggplot( aes(x = factor(year), y = st, fill = logRR)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  labs(x = "Year", y =
         "serotype", fill = "log RR") +
  theme_minimal()+
  theme(axis.text.x=element_text(angle=45, hjust=1))

rr_vt <- s2 %>%
  mutate(pcv13st = if_else(st %in% pcv13,'VT','NVT')) %>%
  filter(pcv13st =='VT') %>%
  ggplot( aes(x = factor(year), y = st, fill = logRR)) +
  geom_tile() +
  #     guides(fill="none")+
  
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  labs(x = "Year", y =
         "serotype", fill = "log RR") +
  theme_minimal()+
  theme(axis.text.x=element_text(angle=45, hjust=1))
```

```{r}
#| panel: fill
subplot(ggplotly(rr_vt), ggplotly(rr_nvt),  margin = 0.04)
```

This shows the decreases in serotypes targeted by PCV13 (left) and increases in the occurrence of non-vaccine serotypes (right) since 1998/1999

#### Geographic variation in serotype frequency

Some serotypes have a similar distribution across the US, while others (e.g., serotype 4) have distinct geographic patterns. serotype 4 has been largely confined to the western US in recent years and is largely found among people who are homeless. Data from 2019 IPD (Beall et al, JID 2022 10.1093/infdis/jiac058)

```{r}
#| panel: toolbar
selectInput("select.st2",
            "Select serotype:",
            unique(b2019$sero),
            selected='19F')
```

```{r}
#| panel: fill
plotlyOutput("stGeographyPlot")

```

#### Comparison of invasive pneumococcal disease and pneumonia

```{r pneumococcus_data_3}
ipd1 <- readRDS('./Data/pneumococcus/ABCs_st_1998_2021.rds') %>%
  rename(agec = "Age.Group..years.",
         year=Year,
         st=IPD.Serotype,
         N_IPD = Frequency.Count) %>%
  mutate( st= if_else(st=='16','16F', st),
          st = if_else(st %in% c('15B','15C'), '15BC',st),
          if_else(st %in% c('6A','6C'), '6AC',st)
  ) %>%
  filter(year %in% c(2019,2020) & agec %in% c('Age 50-64','Age 65+')) %>%
  group_by(st) %>%
  summarize( N_IPD= sum(N_IPD))

uad <- readxl::read_excel('./Data/pneumococcus/SSUAD/ramirez_ofid_2025_ofae727.xlsx') %>%
  mutate(N_SSUAD= over65 + a50_64_with_indication + a50_64_no_indication ) %>%
  full_join(ipd1, by='st') %>%
  filter(!is.na(N_SSUAD) & !is.na(N_IPD))

ggplot(uad, aes(x=N_IPD, y=N_SSUAD, label=st)) +
  geom_point()+
  geom_text( vjust = 1)+
  theme_classic() +
  ggtitle('IPD vs pneumonia 50+ years in US')
```

Most often, pneumococcal disease is diagnosed by isolating the bacteria from blood or cerebrospinal fluid. It is harder to determine what serotypes cause pneumonia. This study from Louisville, Kentucky found that the serotypes that are the most common causes of severe blood stream infections are also the most common causes of pneumonia. pneumonia [Ramirez et al OFID 2025](https://academic.oup.com/ofid/article/12/1/ofae727/7926903)
:::
:::

------------------------------------------------------------------------

## Childhood immunization rates

Vaccination of children across the US, by state and vaccine. These data come from the [National Immunization Survey](https://data.cdc.gov/Child-Vaccinations/Vaccination-Coverage-among-Young-Children-0-35-Mon/fhky-rtsk/about_data) The size of the circle is proportional to the number of children participating in the survey. Caution should be used when interpreting these survey data.

```{r vax_data}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("data.csv")$mtime

#pediatric vaccine yptake
#https://data.cdc.gov/Child-Vaccinations/Vaccination-Coverage-among-Young-Children-0-35-Mon/fhky-rtsk/about_data

# csv_to_parquet('./Data/vax/Vaccination_Coverage_among_Young_Children__0-35_Months__20250204.csv',path_to_parquet ='./Data/vax/peds_vax.parquet')
#this breaks out the age data; also has info on income, race, urbanicity, etc
vax_age <- open_dataset('./Data/vax/peds_vax.parquet') %>%
  rename(birth_year = `Birth Year/Birth Cohort`, dim1=`Dimension Type`, age=Dimension,vax_uptake=`Estimate (%)`, samp_size_vax=`Sample Size`) %>%
  collect() %>%
  filter(birth_year==2021 & dim1=='Age') %>%
  dplyr::select(Vaccine,Geography, Dose, dim1, vax_uptake,samp_size_vax, age) %>%
  filter(age=='35 Months' & Geography %in% state.name &
           (Vaccine %in% c('≥1 Dose MMR','≥1 Dose Varicella' ) | 
              (Vaccine=='DTaP' & Dose =='≥4 Doses') | 
              (Vaccine=='Hep A' & Dose =='≥2 Doses') | 
              (Vaccine=='Hep B' & Dose =='≥3 Doses') | 
              (Vaccine=='Hib' & Dose =='Full Series') | 
              (Vaccine=='PCV' & Dose =='≥4 Doses') 
           ) )

vax_urban <- open_dataset('./Data/vax/peds_vax.parquet') %>%
  rename(birth_year = `Birth Year/Birth Cohort`, dim1=`Dimension Type`, urban=Dimension,vax_uptake=`Estimate (%)`, samp_size_vax=`Sample Size`) %>%
  collect() %>%
  filter(birth_year=='2016-2019' & dim1=='Urbanicity') %>%
  dplyr::select(Vaccine,Geography, Dose, dim1, vax_uptake,samp_size_vax, urban) %>%
  filter( Geography %in% state.name &
            (Vaccine %in% c('≥1 Dose MMR','≥1 Dose Varicella' ) | 
               (Vaccine=='DTaP' & Dose =='≥4 Doses') | 
               (Vaccine=='Hep A' & Dose =='≥2 Doses') | 
               (Vaccine=='Hep B' & Dose =='≥3 Doses') | 
               (Vaccine=='Hib' & Dose =='Full Series') | 
               (Vaccine=='PCV' & Dose =='≥4 Doses') 
            ) ) %>%
  mutate(urban= factor(urban, levels= c("Living In a Non-MSA", "Living In a MSA Non-Principal City","Living In a MSA Principal City"),labels=c('Rural','Smaller City', 'Larger City') ))

vax_insurance <- open_dataset('./Data/vax/peds_vax.parquet') %>%
  rename(birth_year = `Birth Year/Birth Cohort`, dim1=`Dimension Type`, insurance=Dimension,vax_uptake=`Estimate (%)`, samp_size_vax=`Sample Size`) %>%
  collect() %>%
  filter(birth_year=='2016-2019' & dim1=='Insurance Coverage') %>%
  dplyr::select(Vaccine,Geography, Dose, dim1, vax_uptake,samp_size_vax, insurance) %>%
  filter( Geography %in% state.name &
            (Vaccine %in% c('≥1 Dose MMR','≥1 Dose Varicella' ) | 
               (Vaccine=='DTaP' & Dose =='≥4 Doses') | 
               (Vaccine=='Hep A' & Dose =='≥2 Doses') | 
               (Vaccine=='Hep B' & Dose =='≥3 Doses') | 
               (Vaccine=='Hib' & Dose =='Full Series') | 
               (Vaccine=='PCV' & Dose =='≥4 Doses') 
            ) ) %>%
  mutate(insurance= factor(insurance, levels= c("Uninsured", "Any Medicaid","Private Insurance Only","Other"),labels=c('Uninsured','Medicaid', 'Private','Other') ))



```

```{r vax_plots}
#| context: server

#vaccine urbanicity
output$vax_urban_plot <- renderPlotly({
  
  plot_vax <- vax_urban %>% 
    filter(Vaccine==input$select.vax2) %>% mutate(vax_order=as.numeric(as.factor(Vaccine)), Vaccine_dose=as.factor(paste(Vaccine,Dose)) ) %>% 
    ggplot(aes(x = vax_uptake, y = urban, 
               text=paste0(Geography, "<br>", 
                           Vaccine_dose, "<br>",
                           vax_uptake, "%" ))) +
    geom_jitter(aes( color = vax_uptake), height = 0.1, width = 0, alpha = 0.7) + 
    #scale_size(range = c(2, 5), name="Uptake (%)")+
    scale_color_viridis_c(option = "viridis", direction=-1) +
    labs(title = "Vaccination Rates by State, 35 months of age", x = "Vaccination Rate (%)", y = '') + 
    theme_minimal() + 
    scale_y_discrete(expand = expansion(mult = c(.1, .1))) + # Add more space between rows 
    theme(legend.position = "none", plot.title = element_text(hjust = 0.5), axis.title.y = element_text(angle = 0, vjust = 0.5))
  
  ggplotly(plot_vax, tooltip='text') #display the plot
  
  
})

#vaccine, by insurance state
output$vax_insurance_plot <- renderPlotly({
  
  plot_ins <- vax_insurance %>% 
    filter(Vaccine==input$select.vax2) %>% mutate(vax_order=as.numeric(as.factor(Vaccine)),  
                                                  Vaccine_dose=as.factor(paste(Vaccine,Dose)) ) %>% 
    ggplot(aes(x = vax_uptake, y = insurance, 
               text=paste0(Geography, "<br>", 
                           Vaccine_dose, "<br>",
                           vax_uptake, "%" ))) +
    geom_jitter(aes( color = vax_uptake), height = 0.1, width = 0, alpha = 0.7) + 
   # scale_size(range = c(2, 5), name="Uptake (%)")+
    scale_color_viridis_c(option = "viridis", direction=-1) +
    labs(title = "Vaccination Rates by State, 35 months of age", x = "Vaccination Rate (%)", y = '') + 
    theme_minimal() + 
    scale_y_discrete(expand = expansion(mult = c(.1, .1))) + # Add more space between rows 
    theme(legend.position = "none", plot.title = element_text(hjust = 0.5), axis.title.y = element_text(angle = 0, 
                                                                                                        vjust = 0.5))
  
  ggplotly(plot_ins, tooltip='text') #display the plot
  
})
```

::: panel-tabset
### Uptake by state

```{r, fig.width=5, fig.height=7}
plot_vax <- vax_age %>% mutate(vax_order=as.numeric(as.factor(Vaccine)), Vaccine_dose=as.factor(paste(Vaccine,Dose)) ) %>% 
  ggplot(aes(x = vax_uptake, y = Vaccine_dose, 
             text=paste0(Geography, "<br>", 
                         Vaccine_dose, "<br>",
                         'Age: ',age, "<br>", 
                         vax_uptake, "%" ))) +
  geom_jitter(aes( color = vax_uptake), height = 0.25, width = 0, alpha = 0.7) + 
  #scale_size(range = c(2, 5), name="Uptake (%)")+ 
    scale_color_viridis_c(option = "viridis", direction=-1) +
  labs(title = "Vaccination Rates by State, 35 months of age", x = "Vaccination Rate (%)", y = '') + 
  theme_minimal() + 
  scale_y_discrete(expand = expansion(mult = c(.1, .1))) + # Add more space between rows 
  theme(legend.position = "none", plot.title = element_text(hjust = 0.5), axis.title.y = element_text(angle = 0, vjust = 0.5))

ggplotly(plot_vax, tooltip='text')
```

### Uptake by urbanicity

Variation in vaccine uptake based on how urban an area is.

```{r}
#| panel: toolbar

selectInput("select.vax2", "Vaccine:", 
            choices=unique(vax_urban$Vaccine), selected='PCV')
```

```{r}
#| panel: fill
#| layout-ncol: 1
#| height: 1200px

plotlyOutput("vax_urban_plot")

```

Variation in vaccine uptake based on how urban an area is. Uptake in non-urban, smaller urban, larger urban locations

### Uptake based on insurance status

```{r}
#| panel: fill
#| layout-ncol: 1
#| height: 1200px

plotlyOutput("vax_insurance_plot")

```

Variation in vaccine uptake rates based on insurance status
:::

------------------------------------------------------------------------

## Youth Wellbeing

------------------------------------------------------------------------

```{r youth_self_harm_data}
#| context: data
#| include: false

#data from WISQARS dashboard; manual download 2/27/2025
#Self-Harm All Causes Nonfatal Emergency Department Visits and Rates per 100,000 ;Data Years: 2001 to 2022, United States, 0 to 4 through 15 to 19, Males, Females, Disposition: All Cases

s1 <- read.csv('./Data/youth_wellbeing/WISQARS/youth_self_harm.csv') %>%
  filter(Intent=='Self-Harm' & Age.Group %in% c('10 to 14','15 to 19')) %>%
  mutate(Crude.Rate=as.numeric(Crude.Rate))



```

::: panel-tabset
### Self-harm

::: panel-tabset
#### National (WISQARS)

```{r}
#| panel: fill

p1 <- ggplot(s1, aes(x=Year, y=Crude.Rate, group=Sex, color=Sex, linetype=Sex)) +
  geom_line()+
  facet_wrap(~Age.Group) +
  theme_classic() +
  ylab('Events/100,000 people')+
  ggtitle('Self harm among youths (CDC/WISQARS)')
ggplotly(p1)
```

These data come from the [CDC WISQARS](https://wisqars.cdc.gov/) platform, which has data from the [National Electronic Injury Surveillance System-All Injury Program (NEISS-AIP)](https://wisqars.cdc.gov/about/nonfatal-injury-data/), a sample of emergency departments around the United States.

#### State (Epic Cosmos)

*Coming soon*

```{r}
#| panel: fill

```
:::

### Road accidents

*Coming soon!*

::: panel-tabset

#### Epic Cosmos

*Coming soon!*

```{r}
#| panel: fill

```


:::

### Overdose attempts

*Coming soon!*

::: panel-tabset

#### Epic Cosmos

*Coming soon!*

```{r}
#| panel: fill

```

:::

### Obesity

*Coming soon!*

::: panel-tabset

#### Epic Cosmos

*Coming soon!*

```{r}
#| panel: fill

```


:::

:::

## Opioids

```{r opioid_data}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("data.csv")$mtime


## NOTE: (Feb 28, 2025) Do not filter out the numerical codings (7777, 8888, and
##       9999) from all numerical columns prior to plotting. Instead, only
##       filter the column being plotted.


# Interactive
df1 <- read_csv('./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv', show_col_types = FALSE) |>
  clean_names() |> 
  dplyr::filter(!(count %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  dplyr::filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) %>%
  mutate(qtr=as.numeric((gsub("Q",'', quarter))), 
         qtr =if_else(is.na(qtr),1,qtr),
         qdate= year+ qtr/4 -1/4
  )

opioid_path <- "./Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv"

df_opioid <- read_csv(opioid_path) |>
  clean_names() |> 
  filter(!(count %in% c(7777, 8888, 9999))) |> 
  filter(!(crude_rate %in% c(7777, 8888, 9999))) |> 
  filter(!(age_adjusted_rate %in% c(7777, 8888, 9999))) |> 
  # Filter out rows without Quarter
  filter(!is.na(quarter)) |> 
  # Create year_quarter column
  mutate(year_quarter = paste(year, quarter))

#time series dataset
opioid_ts_ds  <- df_opioid %>%
  filter(drug=='All Opioids' & 
           characteristic=='Age' ) |> 
  group_by(dataset, state, year_quarter, level) %>%
  summarize(count=sum(count, na.rm = TRUE)) |>
  ungroup() |> 
  pivot_wider(names_from = level, values_from = count) |> 
  mutate(Overall = `25-44 Years` + `45-64 Years` + `65+ Years` + `<24 Years`) |> 
  pivot_longer(
    cols = where(is.numeric),
    names_to = "level",
    values_to = "count"
  ) |> 
  mutate(level = factor(level),
         level = fct_relevel(level, c("Overall", "65+ Years",
                                      "45-64 Years", "25-44 Years",
                                      "<24 Years"))) |> 
  filter(count > 0) 


# Static
opioid_od <- read_csv(opioid_path) %>%
  as.data.frame()


# Waffle Plots
subset <- read_csv("Data/Harmonized Opioid Overdose Datasets_01.23.2025.csv") |> 
  # Filter the placeholder numerical values.
  #filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
  filter(Count %!in% 7777 & Count %!in% 8888 & Count %!in% 9999) %>%
  
  # Removing the extraneous Drug and Year classes that are not common to the
  # SUDORS and CDC WONDER dataset.
  filter(Drug %!in% c("Naloxone"), Year %in% c(2020, 2021, 2022)) %>%
  
  # Filter the metadata settings.
  filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
         `Underlying Cause of Death` %in% "Unintentional",
         Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
  
  # Some random duplicates were detected. Not sure where these might have
  # been introduced or if the dataset came this way. This script is meant to
  # quickly deal with these.
  group_by(Dataset, Year, Drug) %>%
  mutate(Count = sum(Count)) %>%
  ungroup() %>%
  
  select(-`Crude Rate`, -`Age Adjusted Rate`, -Population) %>%
  distinct() %>%
  
  # Calculate the relative proportion of overdose events for a given Dataset
  # and Year.
  group_by(Dataset, Year) %>%
  mutate(Percentage = floor(Count/sum(Count)*100)) %>%
  ungroup() %>%
  
  # Waffle plots do not accept NA's or 0's. Remove them.
  mutate_at(c("Percentage"), ~replace_na(., 0)) %>%
  filter(!Percentage == 0) %>%
  
  # Organize the final table.
  .[with(., order(Dataset, Year, Percentage)), ] %>% `rownames<-`(NULL) %>%
  as.data.frame()


coloring <- data.frame("Drug"  = sort(unique(subset$Drug)),
                       "Color" = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99', '#e31a1c', '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99')[1:length(sort(unique(subset$Drug)))]
                       #"Color" = c('#8dd3c7','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffffb3')[1:length(sort(unique(subset$Drug)))]
                       )


waffle_2020 <- subset %>%
  filter(Year %in% 2020)

waffle_2021 <- subset %>%
  filter(Year %in% 2021)

waffle_2022 <- subset %>%
  filter(Year %in% 2022)

 # Generate the waffle plots.
  w1 <- waffle_2020 %>%
    ggplot(aes(fill = Drug, values = Percentage)) +
    geom_waffle(n_rows = 5, size = 0.33, colour = "white") +
    facet_wrap(~Dataset+Year) +
    # Add the color scheme specific for the drugs present in the SUDORS subset.
    scale_fill_manual(name = NULL, 
                      labels = coloring[coloring$Drug %in% unique(waffle_2020$Drug), "Drug"],
                      values = coloring[coloring$Drug %in% unique(waffle_2020$Drug), "Color"]) +
    coord_equal() + theme_void(base_size = 16) + 
    theme(legend.position = "none")
  
  
  w2 <- waffle_2021 %>%
    ggplot(aes(fill = Drug, values = Percentage)) +
    geom_waffle(n_rows = 5, size = 0.33, colour = "white") +
    facet_wrap(~Dataset+Year) +
    # Add the color scheme specific for the drugs present in the CDC WONDER subset.
    scale_fill_manual(name = NULL, 
                      labels = coloring[coloring$Drug %in% unique(waffle_2021$Drug), "Drug"],
                      values = coloring[coloring$Drug %in% unique(waffle_2021$Drug), "Color"]) +
    coord_equal() + theme_void(base_size = 16) + 
    theme(legend.position = "none")
  
  
  w3 <- waffle_2022 %>%
    ggplot(aes(fill = Drug, values = Percentage)) +
    geom_waffle(n_rows = 5, size = 0.33, colour = "white") +
    facet_wrap(~Dataset+Year) +
    # Add the color scheme specific for the drugs present in the CDC WONDER subset.
    scale_fill_manual(name = NULL, 
                      labels = coloring[coloring$Drug %in% unique(waffle_2022$Drug), "Drug"],
                      values = coloring[coloring$Drug %in% unique(waffle_2022$Drug), "Color"]) +
    coord_equal() + theme_void(base_size = 16) + 
    theme(legend.position = "bottom", legend.title = element_blank())
  
  
    # -----------------------------
  # US Map plot.
  
  # Code to find mathes between AHRQ and CDC WONDER
  #opioid_od[opioid_od$Dataset %in% "AHRQ", "Setting"] %>% unique()
  
  # Generate a side-by-side set of plots showing "Drug = All Opioids" counts
  # by state in 2022. Toggle the setting to show either inpatient or ER.
  
  
  # Counts in AHRQ dataset.
  ahrq_map_plot <- opioid_od %>%
    # Filter the placeholder numerical values.
    filter(Count %!in% 7777 & Count %!in% 8888 & Count %!in% 9999) %>%
    
    # Switch between the two settings, and change the subtitle name.
    filter(Setting %in% "Medical Facility - Inpatient") %>%
    #filter(Setting %in% "Medical Facility - Outpatient or ER") %>%
    
    # Filter the metadata settings.
    filter(Dataset %in% "AHRQ", State %in% datasets::state.name, 
           Year %in% 2022, Quarter %in% NA,
           `Underlying Cause of Death` %in% "All", Drug %in% "All Opioids",
           Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
    
    # plot_usmap() requires specific nomenclature for the column with states.
    rename(state = State) %>%
    
    # Plot settings and features.
    plot_usmap(data = ., values = "Count", color = "#00356B",) + 
    scale_fill_gradientn(
      colors = yale_gradient,   # Use Yale branding colors in gradient
      name = "Count (2022)", 
      labels = scales::comma    # Format labels with commas
    ) + 
    labs(title = "Hospitalizations (AHRQ)") +
    theme(legend.position = "",
          plot.title = element_text(size = 14),  # Increase title size
          axis.ticks = element_blank(),
          axis.text = element_blank(),
          legend.text = element_text(size = 12),               # Adjust legend text
          legend.title = element_text(size = 14))
  
  # Add a custom tooltip with comma formatting
  ahrq_map_plot <- ahrq_map_plot +
    aes(text = paste0("State: ", state, "<br>",
                      "Count: ", scales::comma(Count)))
  

  # Counts in CDC WONDER dataset.
  wonder_map_plot <- opioid_od %>%
    # Filter the placeholder numerical values.
    filter(Count %!in% 7777 & Count %!in% 8888 & Count %!in% 9999) %>%
    
    # Switch between the two settings, and change the subtitle name.
    filter(Setting %in% "Medical Facility - Inpatient") %>%
    #filter(Setting %in% "Medical Facility - Outpatient or ER") %>%
    
    # Filter the metadata settings.
    filter(Dataset %in% "CDC WONDER", State %in% datasets::state.name, 
           Year %in% 2022, Quarter %in% NA,
           `Underlying Cause of Death` %in% "All", Drug %in% "All Opioids",
           Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
    
    # plot_usmap() requires specific nomenclature for the column with states.
    rename(state = State) %>%
    
    # Plot settings and features.
    plot_usmap(data = ., values = "Count", color = "#00356B",) + 
    scale_fill_gradientn(
      colors = yale_gradient,   # Use Yale branding colors in gradient
      name = "Count (2022)", 
      labels = scales::comma    # Format labels with commas
    ) + 
    labs(title = "\ \ \ \ \ \ Deaths (CDC WONDER)") +
    theme(legend.position = "right",
          plot.title = element_text(size = 14),  # Increase title size
          axis.ticks = element_blank(),
          axis.text = element_blank(),
          legend.text = element_text(size = 14),               # Adjust legend text
          legend.title = element_text(size = 16))
  
  # Add a custom tooltip with comma formatting
  wonder_map_plot <- wonder_map_plot +
    aes(text = paste0("State: ", state, "<br>",
                      "Count: ", scales::comma(Count)))
  
  
```

```{r opioid_plots}
#| context: server


output$distPlot1 <- renderPlotly({
  
  p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='AHRQ' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
    ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
  ggplotly(p1)
})

output$distPlot2 <- renderPlotly({
  
  p1 <- df1 %>%
    dplyr::filter(drug=='All Opioids' & characteristic=='Age' & dataset=='NCHS' & state == input$state.select ) %>%
    group_by(qdate, level) %>%
    summarize(count=sum(count)) %>% #combine outpatient nad inpatient
    ggplot(aes(x=qdate, y=count, group=level, color=level)) +
    theme_minimal() +
    geom_line()
  ggplotly(p1)
})

## Opioid
df_time_series_interactive <- reactive({
  df_opioid %>%
    filter(drug=='All Opioids' & 
             characteristic=='Age' &
             state == input$state) |> 
    group_by(dataset, state, year_quarter, level) %>%
    summarize(count=sum(count, na.rm = TRUE)) |>
    ungroup() |> 
    pivot_wider(names_from = level, values_from = count) |> 
    mutate(Overall = `25-44 Years` + `45-64 Years` + `65+ Years` + `<24 Years`) |> 
    pivot_longer(
      cols = where(is.numeric),
      names_to = "level",
      values_to = "count"
    ) |> 
    mutate(level = factor(level),
           level = fct_relevel(level, c("Overall", "65+ Years",
                                        "45-64 Years", "25-44 Years",
                                        "<24 Years"))) |> 
    filter(count > 0) 
})

output$opioid_time_series_interactive_1 <- renderPlotly({ 
  # User must provide inputs
  req(input$state)
  # Dataset must have rows
  req(nrow(df_time_series_interactive()) > 0)
  
  p1 <- df_time_series_interactive() %>%
    mutate(dataset=if_else(dataset=='NCHS', 'Deaths (NCHS)',
                   if_else(dataset=='AHRQ', 'Hospitalizations (AHRQ)',dataset         ))) %>%
    ggplot(aes(x = year_quarter, y = count, 
               group = level, color = level,
               text = paste0("Quarter: ", year_quarter, "\n",
                             "Count: ", scales::comma(count)))) +
    geom_line() +
    labs(x = NULL,
         y = "Count",
         color = "Age Category") +
    scale_x_discrete(breaks = c("2016 Q1", "2017 Q1", "2018 Q1",
                                "2019 Q1", "2020 Q1", "2021 Q1", 
                                "2022 Q1")) +
    scale_y_continuous(labels = scales::comma) +
    scale_color_manual(values = yale_colors) + # Apply Yale branding colors
    facet_wrap(~dataset, scales='free_y') +
    theme_minimal(base_size = 15) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  ggplotly(p1, tooltip = c("text"))
}) 



output$opioid_time_series_interactive_2 <- renderPlotly({
  
  p <- df_opioid %>%
      mutate(dataset=if_else(dataset=='CDC WONDER', 'Deaths (NCHS)',
                   if_else(dataset=='AHRQ', 'Hospitalizations (AHRQ)',dataset         ))) %>%
    filter(drug=='All Opioids' & 
             characteristic=='Sex' &
             state == "US") %>%
    group_by(dataset, state, year_quarter, level) %>%
    summarize(count=sum(count, na.rm = TRUE)) %>%
    ungroup() %>%
    filter(count > 0) %>%
    ggplot(aes(x = year_quarter, y = count, 
               group = level, color = level,
               text = paste0("Quarter: ", year_quarter, "\n",
                             "Count: ", scales::comma(count)))) +
    geom_line() +
    labs(x = NULL,
         y = "Count",
         color = NULL,
         title = "National Opioid Overdose Count") +
    scale_x_discrete(breaks = c("2016 Q1", "2017 Q1", "2018 Q1",
                                "2019 Q1", "2020 Q1", "2021 Q1", 
                                "2022 Q1")) +
    scale_y_continuous(labels = scales::comma) +
    scale_color_manual(values = yale_colors) + # Apply Yale branding colors
    facet_wrap(~dataset, scales='free_y') +
    theme_minimal(base_size = 13) +
    ylim(0, NA) +
    theme(axis.text.x = element_text(angle = 45,  hjust = 1))
  
  ggplotly(p, tooltip = "text")
})

output$opioid_bar_graph_2020 <- renderPlotly({
  
  p <- opioid_od %>%
    # Filter the placeholder numerical values.
    filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
    
    # Change the date named in the plot title.
    filter(Year %in% 2020) %>%
    
    # Filter the metadata settings.
    filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
           `Underlying Cause of Death` %in% "Unintentional",
           Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
    mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                          "Mental and behavioural disorders",
                          Drug)) %>%
    
    # Plot settings and features.
    ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                         text = paste0("Drug: ", Drug, "<br>",
                                       "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
    geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
    labs(title = "National Opioid Overdose Rate\nby Types of Opioid and Polysubstance in 2020",
         subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
         x = "", y = "Age-Adjusted Rate (per 100,000)") +
    scale_color_manual(values = yale_colors) + # Apply Yale branding colors
    scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
    theme_minimal(base_size = 13) + 
    theme(axis.text.x = element_text(angle = 90,  hjust = 1))
  
  ggplotly(p, tooltip = "text")
})

output$opioid_bar_graph_2021 <- renderPlotly({
  
  
  p <- opioid_od %>%
    # Filter the placeholder numerical values.
    filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
    
    # Change the date named in the plot title.
    filter(Year %in% 2021) %>%
    
    # Filter the metadata settings.
    filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
           `Underlying Cause of Death` %in% "Unintentional",
           Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
    mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                          "Mental and behavioural disorders",
                          Drug)) %>%
    
    # Plot settings and features.
    ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                         text = paste0("Drug: ", Drug, "<br>",
                                       "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
    geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
    labs(title = "National Opioid Overdose Rate by\nTypes of Opioid and Polysubstance in 2021",
         subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
         x = "", y = "Age-Adjusted Rate\n(per 100,000)") +
    scale_color_manual(values = yale_colors) + # Apply Yale branding colors
    scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
    theme_minimal(base_size = 13) +
    theme(axis.text.x = element_text(angle = 90,  hjust = 1))
  
  ggplotly(p, tooltip = "text")
})

output$opioid_bar_graph_2022 <- renderPlotly({
  
  
  p <- opioid_od %>%
    # Filter the placeholder numerical values.
    filter(`Age Adjusted Rate` %!in% 7777 & `Age Adjusted Rate` %!in% 8888 & `Age Adjusted Rate` %!in% 9999) %>%
    
    # Change the date named in the plot title.
    filter(Year %in% 2022) %>%
    
    # Filter the metadata settings.
    filter(State %in% "US", Quarter %in% NA, Setting %in% "All",
           `Underlying Cause of Death` %in% "Unintentional",
           Characteristic %in% "Not Stratified", Level %in% "N/A") %>%
    mutate(Drug = if_else(Drug == "Mental and behavioural disorders due to use of opioids, acute intoxication",
                          "Mental and behavioural disorders",
                          Drug)) %>%
    
    # Plot settings and features.
    ggplot(data = ., aes(x = Drug, y = `Age Adjusted Rate`,
                         text = paste0("Drug: ", Drug, "<br>",
                                       "Age Adjusted Rate: ", `Age Adjusted Rate`))) +
    geom_bar(stat = "identity", position = "dodge", aes(fill = Dataset, color = Dataset)) +
    labs(title = "National Opioid Overdose Rate\nby Types of Opioid and Polysubstance in 2022",
         subtitle = "Underlying Cause of Death: Unintentional Setting: All.",
         x = "", y = "Age-Adjusted Rate\n(per 100,000)") +
    scale_color_manual(values = yale_colors) + # Apply Yale branding colors
    scale_fill_manual(values = yale_colors) + # Apply Yale branding colors
    theme_minimal(base_size = 13) + 
    theme(axis.text.x = element_text(angle = 90,  hjust = 1))
  
  ggplotly(p, tooltip = "text")
  
})




```

::: panel-tabset
### Trends in national healthcare incidents

```{r}
#| panel: fill
plotlyOutput("opioid_time_series_interactive_2")

```

### Map of opioid overdoses

AHRQ hospitalizations

```{r}
#| panel: fill
  ggplotly(ahrq_map_plot, tooltip = "text")
```

CDC WONDER

```{r}
#| panel: fill
  ggplotly(wonder_map_plot, tooltip = "text")

```

### Type of opioid

```{r}
#| panel: fill
waffle::iron(w1, w2, w3)
```
:::

------------------------------------------------------------------------

## Documentation

### Notes on data sources

Coming soon!

### Acknowledgements

We thank all of the organizations and individuals who make their data available for health monitoring and research. 

Some data used in this platform come from Epic Cosmos, a dataset created in collaboration with a community of Epic health systems representing more than 295 million patient records from over 1633 hospitals and 37,900 clinics from all 50 states, D.C.,
Lebanon, and Saudi Arabia. Epic data were obtained using the SlicerDicer tool in [Epic Cosmos.](https://www.epicresearch.org/about-us) and are presented here for non-commercial purposes.

Google Trends data, representing search volume by week and state or metropolitan area, are obtained from the [Google Trends API](https://developers.google.com/terms/) for non-commercial purposes.

Contributors include:

Data wrangling, code, visualization: Shelby Golden, Howard Baik,Micah Iserman, Maurice Dalton, Deus Thindwa, Stephanie Perniciaro, Dan Weinberger

Project Leadership and Partners: Megan Ranney, Bhramar Mukherjee, Katelyn Jetelina, Ron Borzekowski, Anne Zink, and Dan Weinberger

Feedback or suggestions? [Let us know!](https://docs.google.com/forms/d/e/1FAIpQLSchAasiq7ovCCNz9ussb7C2ntkZ-8Rjc7-tNSglkf5boS-A0w/viewform?usp=dialog)

**Legal Disclaimer**

These data and PopHIVE statistical outputs are provided "as is", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and noninfringement. In no event shall the authors, contributors, or copyright holders be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the data or the use or other dealings in the data.The PopHIVE statistical outputs are research tools intended for use in the fields of public health and medicine. They are not intended for clinical decision making, are not intended to be used in the diagnosis or treatment of patients and may not be useful or appropriate for any clinical purpose. Users of the PopHIVE statistical outputs should be aware of their responsibilities to ensure the ethical and appropriate use of this technology, including adherence to any applicable legal and regulatory requirements. The content and data provided with the statistical outputs do not replace the expertise of healthcare professionals. Healthcare professionals should use their professional judgment in evaluating the outputs of the PopHIVE statistical outputs.


